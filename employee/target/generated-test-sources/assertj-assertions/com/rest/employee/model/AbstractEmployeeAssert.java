package com.rest.employee.model;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Employee} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractEmployeeAssert<S extends AbstractEmployeeAssert<S, A>, A extends Employee> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractEmployeeAssert}</code> to make assertions on actual Employee.
   * @param actual the Employee we want to make assertions on.
   */
  protected AbstractEmployeeAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Employee's commission is equal to the given one.
   * @param commission the given commission to compare the actual Employee's commission to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Employee's commission is not equal to the given one.
   */
  public S hasCommission(Integer commission) {
    // check that actual Employee we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting commission of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualCommission = actual.getCommission();
    if (!Objects.areEqual(actualCommission, commission)) {
      failWithMessage(assertjErrorMessage, actual, commission, actualCommission);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Employee's department is equal to the given one.
   * @param department the given department to compare the actual Employee's department to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Employee's department is not equal to the given one.
   */
  public S hasDepartment(Department department) {
    // check that actual Employee we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting department of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Department actualDepartment = actual.getDepartment();
    if (!Objects.areEqual(actualDepartment, department)) {
      failWithMessage(assertjErrorMessage, actual, department, actualDepartment);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Employee's hireDate is equal to the given one.
   * @param hireDate the given hireDate to compare the actual Employee's hireDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Employee's hireDate is not equal to the given one.
   */
  public S hasHireDate(java.time.LocalDate hireDate) {
    // check that actual Employee we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting hireDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualHireDate = actual.getHireDate();
    if (!Objects.areEqual(actualHireDate, hireDate)) {
      failWithMessage(assertjErrorMessage, actual, hireDate, actualHireDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Employee's id is equal to the given one.
   * @param id the given id to compare the actual Employee's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Employee's id is not equal to the given one.
   */
  public S hasId(Integer id) {
    // check that actual Employee we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Employee's job is equal to the given one.
   * @param job the given job to compare the actual Employee's job to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Employee's job is not equal to the given one.
   */
  public S hasJob(String job) {
    // check that actual Employee we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting job of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualJob = actual.getJob();
    if (!Objects.areEqual(actualJob, job)) {
      failWithMessage(assertjErrorMessage, actual, job, actualJob);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Employee's managerId is equal to the given one.
   * @param managerId the given managerId to compare the actual Employee's managerId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Employee's managerId is not equal to the given one.
   */
  public S hasManagerId(Integer managerId) {
    // check that actual Employee we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting managerId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualManagerId = actual.getManagerId();
    if (!Objects.areEqual(actualManagerId, managerId)) {
      failWithMessage(assertjErrorMessage, actual, managerId, actualManagerId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Employee's name is equal to the given one.
   * @param name the given name to compare the actual Employee's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Employee's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual Employee we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Employee's salary is equal to the given one.
   * @param salary the given salary to compare the actual Employee's salary to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Employee's salary is not equal to the given one.
   */
  public S hasSalary(Double salary) {
    // check that actual Employee we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting salary of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Double actualSalary = actual.getSalary();
    if (!Objects.areEqual(actualSalary, salary)) {
      failWithMessage(assertjErrorMessage, actual, salary, actualSalary);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Employee's salary is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param salary the value to compare the actual Employee's salary to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Employee's salary is not close enough to the given value.
   */
  public S hasSalaryCloseTo(Double salary, Double assertjOffset) {
    // check that actual Employee we want to make assertions on is not null.
    isNotNull();

    Double actualSalary = actual.getSalary();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting salary:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualSalary, salary, assertjOffset, Math.abs(salary - actualSalary));

    // check
    Assertions.assertThat(actualSalary).overridingErrorMessage(assertjErrorMessage).isCloseTo(salary, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return myself;
  }

}
